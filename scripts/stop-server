#!/usr/bin/env python3
import logging
import os
import pwd
import subprocess
import sys
import time

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
from scripts.lib.supervisor import list_supervisor_processes
from scripts.lib.zulip_tools import (
    ENDC,
    OKGREEN,
    WARNING,
    has_application_server,
    has_process_fts_updates,
)

deploy_path = os.path.realpath(os.path.join(os.path.dirname(__file__), ".."))
os.chdir(deploy_path)

if pwd.getpwuid(os.getuid()).pw_name != "zulip":
    logging.error("Must be run as user 'zulip'.")
    sys.exit(1)

logging.Formatter.converter = time.gmtime
logging.basicConfig(format="%(asctime)s stop-server: %(message)s", level=logging.INFO)

services = []

# Start with the least-critical services:
if has_process_fts_updates():
    services.append("process-fts-updates")

if has_application_server():
    services.extend(("zulip-django", "zulip-tornado:*", "zulip-workers:*"))
    if has_application_server(once=True):
        # These used to be included in "zulip-workers:*"; since we may
        # be stopping an older version of Zulip, which has not applied
        # puppet to reload the new list of processes, only stop them
        # if they currently exist according to `supervisorctl`.
        services.extend(
            list_supervisor_processes(
                [
                    "zulip_deliver_scheduled_emails",
                    "zulip_deliver_scheduled_messages",
                ]
            ),
        )

subprocess.check_call(["supervisorctl", "stop", *services])

print()
print(f"{OKGREEN}Zulip stopped successfully!{ENDC}")

using_sso = subprocess.check_output(["./scripts/get-django-setting", "USING_APACHE_SSO"])
if using_sso.strip() == b"True":
    print()
    print(f"{WARNING}Apache2 needs to be shut down; as root, run:{ENDC}")
    print("    service apache2 stop")
    print()
